name: Deploy Webshop Backend

on:
  push:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    name: Run Tests
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'
      - name: Restore
        run: dotnet restore api/Webshop.sln
      - name: Build
        run: dotnet build api/Webshop.sln -c Release --no-restore
      - name: Test
        run: dotnet test api/Webshop.sln -c Release --no-build --verbosity normal

  deploy:
    runs-on: ubuntu-latest
    needs: test
    name: Deploy + Server-side EF (SQLite)
    env:
      # Sti til SQLite på serveren (tilpas hvis din service lægger filen et andet sted)
      SERVER_SQLITE_PATH: /var/www/webshop-api/app.db
      SERVER_SRC_PATH: /opt/webshop-src
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Publish API
        run: dotnet publish api/Webshop.Api/Webshop.Api.csproj -c Release -o api/Webshop.Api/publish

      - name: Verify publish not empty
        run: |
          shopt -s nullglob
          files=(api/Webshop.Api/publish/*)
          if [ ${#files[@]} -eq 0 ]; then
            echo "::error::Publish folder is empty"
            exit 1
          fi

      - name: Copy published build to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "api/Webshop.Api/publish/**"
          target: ${{ secrets.SERVER_BACKEND_PATH }}
          overwrite: true

      # --- Kun til EF på serveren: kopier projektkilde så dotnet-ef kan design-time bygge ---
      - name: Copy API source (for EF) to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: |
            api/Webshop.Api/**
            api/Webshop.sln
          target: ${{ env.SERVER_SRC_PATH }}
          overwrite: true

      - name: Run EF Core migrations on server (SQLite)
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -e
            export PATH="$PATH:$HOME/.dotnet/tools"
            dotnet --info >/dev/null
            dotnet tool install --global dotnet-ef || true
            # Sørg for at sqlite-filen eksisterer og mappe er skrivbar
            sudo mkdir -p "$(dirname '${{ env.SERVER_SQLITE_PATH }}')"
            sudo touch "${{ env.SERVER_SQLITE_PATH }}"
            sudo chown "$USER":"$USER" "${{ env.SERVER_SQLITE_PATH }}"
            cd "${{ env.SERVER_SRC_PATH }}/api/Webshop.Api"
            # Kør migrations mod serverens *rigtige* filsti
            dotnet ef database update \
              --project Webshop.Api.csproj \
              --startup-project Webshop.Api.csproj \
              --configuration Release \
              --connection "Data Source=${{ env.SERVER_SQLITE_PATH }}"

      - name: Configure secrets in systemd and restart
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -e
            sudo systemctl stop webshop-api.service || true
            sudo mkdir -p /etc/systemd/system/webshop-api.service.d
            cat >/tmp/override.conf << 'EOF'
            [Service]
            Environment="SENDGRID_API_KEY=${{ secrets.SENDGRID_API_KEY }}"
            Environment="STRIPE__SecretKey=${{ secrets.STRIPE_SECRET_KEY }}"
            Environment="STRIPE__WebhookSecret=${{ secrets.STRIPE_WEBHOOK_SECRET }}"
            EOF
            sudo mv /tmp/override.conf /etc/systemd/system/webshop-api.service.d/override.conf
            sudo chmod 644 /etc/systemd/system/webshop-api.service.d/override.conf
            sudo systemctl daemon-reload
            sudo systemctl start webshop-api.service
            sudo systemctl status webshop-api.service --no-pager -l || true
