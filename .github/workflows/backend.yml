name: Deploy Webshop Backend

on:
  push:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest
    name: Run Tests

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    - name: Restore dependencies
      run: dotnet restore api/Webshop.sln

    - name: Build solution
      run: dotnet build api/Webshop.sln --configuration Release --no-restore

    - name: Run tests
      run: dotnet test api/Webshop.sln --configuration Release --no-build --verbosity normal

  deploy:
    runs-on: ubuntu-latest
    name: Deploy to Server
    needs: test  # âœ… This ensures deploy only runs if tests pass
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    - name: Publish API
      run: dotnet publish api/Webshop.Api/Webshop.Api.csproj -c Release -o api/Webshop.Api/publish

    - name: Copy build to server via SCP
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        source: |
          api/Webshop.Api/publish/**
          api/Webshop.Api/Webshop.Api.csproj
        target: ${{ secrets.SERVER_BACKEND_PATH }}

    - name: Configure secrets in systemd and restart
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          set -e

          # Stop service during update (optional but safer)
          sudo systemctl stop webshop-api.service || true

          # Create a systemd drop-in to inject environment variables
          sudo mkdir -p /etc/systemd/system/webshop-api.service.d

          cat >/tmp/override.conf << 'EOF'
          [Service]
          Environment="SENDGRID_API_KEY=${{ secrets.SENDGRID_API_KEY }}"
          Environment="STRIPE__SecretKey=${{ secrets.STRIPE_SECRET_KEY }}"
          Environment="STRIPE__WebhookSecret=${{ secrets.STRIPE_WEBHOOK_SECRET }}"
          EOF

          sudo mv /tmp/override.conf /etc/systemd/system/webshop-api.service.d/override.conf
          sudo chmod 644 /etc/systemd/system/webshop-api.service.d/override.conf

          # (Optional) remove SQLite DB if you truly want a fresh DB each deploy
          # sudo rm -f ${{ secrets.SERVER_BACKEND_PATH }}/app.db

          # Apply changes and restart
          sudo systemctl daemon-reload
          sudo systemctl start webshop-api.service
          sudo systemctl status webshop-api.service --no-pager -l || true

    - name: Install dotnet-ef tool on server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          dotnet tool install --global dotnet-ef || true
          export PATH="$PATH:$HOME/.dotnet/tools"

    - name: Run EF Core migrations on server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          export PATH="$PATH:$HOME/.dotnet/tools"
          cd ${{ secrets.SERVER_BACKEND_PATH }}
          dotnet ef database update --no-build --project Webshop.Api.csproj
